<?php
/**
 * ListTransactionsByBlockHashRIBSZVJoinSplitTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CryptoAPIs
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace CryptoAPIs\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * ListTransactionsByBlockHashRIBSZVJoinSplitTest Class Doc Comment
 *
 * @category    Class
 * @description ListTransactionsByBlockHashRIBSZVJoinSplit
 * @package     CryptoAPIs
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class ListTransactionsByBlockHashRIBSZVJoinSplitTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "ListTransactionsByBlockHashRIBSZVJoinSplit"
     */
    public function testListTransactionsByBlockHashRIBSZVJoinSplit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "anchor"
     */
    public function testPropertyAnchor()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cipher_texts"
     */
    public function testPropertyCipherTexts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "commitments"
     */
    public function testPropertyCommitments()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "macs"
     */
    public function testPropertyMacs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "nullifiers"
     */
    public function testPropertyNullifiers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "one_time_pub_key"
     */
    public function testPropertyOneTimePubKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "proof"
     */
    public function testPropertyProof()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "random_seed"
     */
    public function testPropertyRandomSeed()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "v_pub_new"
     */
    public function testPropertyVPubNew()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "v_pub_old"
     */
    public function testPropertyVPubOld()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
